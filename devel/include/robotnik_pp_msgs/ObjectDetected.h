// Generated by gencpp from file robotnik_pp_msgs/ObjectDetected.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_PP_MSGS_MESSAGE_OBJECTDETECTED_H
#define ROBOTNIK_PP_MSGS_MESSAGE_OBJECTDETECTED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_pp_msgs
{
template <class ContainerAllocator>
struct ObjectDetected_
{
  typedef ObjectDetected_<ContainerAllocator> Type;

  ObjectDetected_()
    : front(false)
    , back(false)  {
    }
  ObjectDetected_(const ContainerAllocator& _alloc)
    : front(false)
    , back(false)  {
  (void)_alloc;
    }



   typedef uint8_t _front_type;
  _front_type front;

   typedef uint8_t _back_type;
  _back_type back;





  typedef boost::shared_ptr< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectDetected_

typedef ::robotnik_pp_msgs::ObjectDetected_<std::allocator<void> > ObjectDetected;

typedef boost::shared_ptr< ::robotnik_pp_msgs::ObjectDetected > ObjectDetectedPtr;
typedef boost::shared_ptr< ::robotnik_pp_msgs::ObjectDetected const> ObjectDetectedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robotnik_pp_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robotnik_pp_msgs': ['/home/punnu/catkin_ws/src/robotnik_purepursuit_planner/robotnik_pp_msgs/msg', '/home/punnu/catkin_ws/devel/share/robotnik_pp_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73a2bd721b4a3b8685cf760b8c3d9be8";
  }

  static const char* value(const ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73a2bd721b4a3b86ULL;
  static const uint64_t static_value2 = 0x85cf760b8c3d9be8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_pp_msgs/ObjectDetected";
  }

  static const char* value(const ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Boolean variable, True if object has been detected\n\
bool front\n\
bool back\n\
";
  }

  static const char* value(const ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front);
      stream.next(m.back);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectDetected_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_pp_msgs::ObjectDetected_<ContainerAllocator>& v)
  {
    s << indent << "front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front);
    s << indent << "back: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_PP_MSGS_MESSAGE_OBJECTDETECTED_H
